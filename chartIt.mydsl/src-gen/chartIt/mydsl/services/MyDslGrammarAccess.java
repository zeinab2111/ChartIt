/*
 * generated by Xtext 2.27.0
 */
package chartIt.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdEStringParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFunctionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionsFunctionParserRuleCall_6_0 = (RuleCall)cFunctionsAssignment_6.eContents().get(0);
		private final Assignment cFunctionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionsFunctionParserRuleCall_7_0 = (RuleCall)cFunctionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Program returns Program:
		//    'Program'
		//    name=EString
		//    '{'
		//        'id=' id=EString ';'
		//        functions+=Function  ( functions+=Function )*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Program'
		//name=EString
		//'{'
		//    'id=' id=EString ';'
		//    functions+=Function  ( functions+=Function )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id='
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//id=EString
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_4_0() { return cIdEStringParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_6() { return cFunctionsAssignment_6; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_6_0() { return cFunctionsFunctionParserRuleCall_6_0; }
		
		//( functions+=Function )*
		public Assignment getFunctionsAssignment_7() { return cFunctionsAssignment_7; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_7_0() { return cFunctionsFunctionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCsvLoaderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataFilteringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGraphDrawingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Function returns Function:
		//    CsvLoader | DataFiltering | GraphDrawing;
		@Override public ParserRule getRule() { return rule; }
		
		//CsvLoader | DataFiltering | GraphDrawing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CsvLoader
		public RuleCall getCsvLoaderParserRuleCall_0() { return cCsvLoaderParserRuleCall_0; }
		
		//DataFiltering
		public RuleCall getDataFilteringParserRuleCall_1() { return cDataFilteringParserRuleCall_1; }
		
		//GraphDrawing
		public RuleCall getGraphDrawingParserRuleCall_2() { return cGraphDrawingParserRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class CsvLoaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.CsvLoader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathEStringParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CsvLoader returns CsvLoader:
		//        "uses :"  path=EString ";"  ;
		@Override public ParserRule getRule() { return rule; }
		
		//"uses :"  path=EString ";"
		public Group getGroup() { return cGroup; }
		
		//"uses :"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//path=EString
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_1_0() { return cPathEStringParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DataFilteringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.DataFiltering");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumn_filterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumn_filterColumnParserRuleCall_1_0 = (RuleCall)cColumn_filterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColumn_filterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColumn_filterColumnParserRuleCall_2_1_0 = (RuleCall)cColumn_filterAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRowfilter_conditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRowfilter_conditionRowFilterParserRuleCall_5_0 = (RuleCall)cRowfilter_conditionAssignment_5.eContents().get(0);
		
		//DataFiltering returns DataFiltering:
		//        'filter :'
		//        column_filter+=Column (',' column_filter+=Column)*  ';'
		//        ('condition :')?
		//        (rowfilter_condition=RowFilter)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter :'
		//column_filter+=Column (',' column_filter+=Column)*  ';'
		//('condition :')?
		//(rowfilter_condition=RowFilter)?
		public Group getGroup() { return cGroup; }
		
		//'filter :'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//column_filter+=Column
		public Assignment getColumn_filterAssignment_1() { return cColumn_filterAssignment_1; }
		
		//Column
		public RuleCall getColumn_filterColumnParserRuleCall_1_0() { return cColumn_filterColumnParserRuleCall_1_0; }
		
		//(',' column_filter+=Column)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//column_filter+=Column
		public Assignment getColumn_filterAssignment_2_1() { return cColumn_filterAssignment_2_1; }
		
		//Column
		public RuleCall getColumn_filterColumnParserRuleCall_2_1_0() { return cColumn_filterColumnParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//('condition :')?
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//(rowfilter_condition=RowFilter)?
		public Assignment getRowfilter_conditionAssignment_5() { return cRowfilter_conditionAssignment_5; }
		
		//RowFilter
		public RuleCall getRowfilter_conditionRowFilterParserRuleCall_5_0() { return cRowfilter_conditionRowFilterParserRuleCall_5_0; }
	}
	public class GraphDrawingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.GraphDrawing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDrawAPlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGraph_typeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGraph_typeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGraph_typeEStringParserRuleCall_2_0 = (RuleCall)cGraph_typeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAbs_columnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAbs_columnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbs_columnEStringParserRuleCall_5_0 = (RuleCall)cAbs_columnAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOrd_columnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOrd_columnAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOrd_columnEStringParserRuleCall_8_0 = (RuleCall)cOrd_columnAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOrd_columnAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOrd_columnEStringParserRuleCall_9_1_0 = (RuleCall)cOrd_columnAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLabelsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cLabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLabelEStringParserRuleCall_12_0 = (RuleCall)cLabelAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cLabelAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_13_1_0 = (RuleCall)cLabelAssignment_13_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//GraphDrawing returns GraphDrawing:
		//    'Draw a plot :'
		//        'graph_type=' graph_type=EString ';'
		//        'abs_column=' abs_column=EString ';'
		//        'ord_column='  ord_column+=EString ( "," ord_column+=EString)* ';'
		//        'labels='  label+=EString ( "," label+=EString)* ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Draw a plot :'
		//    'graph_type=' graph_type=EString ';'
		//    'abs_column=' abs_column=EString ';'
		//    'ord_column='  ord_column+=EString ( "," ord_column+=EString)* ';'
		//    'labels='  label+=EString ( "," label+=EString)* ';'
		public Group getGroup() { return cGroup; }
		
		//'Draw a plot :'
		public Keyword getDrawAPlotKeyword_0() { return cDrawAPlotKeyword_0; }
		
		//'graph_type='
		public Keyword getGraph_typeKeyword_1() { return cGraph_typeKeyword_1; }
		
		//graph_type=EString
		public Assignment getGraph_typeAssignment_2() { return cGraph_typeAssignment_2; }
		
		//EString
		public RuleCall getGraph_typeEStringParserRuleCall_2_0() { return cGraph_typeEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'abs_column='
		public Keyword getAbs_columnKeyword_4() { return cAbs_columnKeyword_4; }
		
		//abs_column=EString
		public Assignment getAbs_columnAssignment_5() { return cAbs_columnAssignment_5; }
		
		//EString
		public RuleCall getAbs_columnEStringParserRuleCall_5_0() { return cAbs_columnEStringParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'ord_column='
		public Keyword getOrd_columnKeyword_7() { return cOrd_columnKeyword_7; }
		
		//ord_column+=EString
		public Assignment getOrd_columnAssignment_8() { return cOrd_columnAssignment_8; }
		
		//EString
		public RuleCall getOrd_columnEStringParserRuleCall_8_0() { return cOrd_columnEStringParserRuleCall_8_0; }
		
		//( "," ord_column+=EString)*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//ord_column+=EString
		public Assignment getOrd_columnAssignment_9_1() { return cOrd_columnAssignment_9_1; }
		
		//EString
		public RuleCall getOrd_columnEStringParserRuleCall_9_1_0() { return cOrd_columnEStringParserRuleCall_9_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'labels='
		public Keyword getLabelsKeyword_11() { return cLabelsKeyword_11; }
		
		//label+=EString
		public Assignment getLabelAssignment_12() { return cLabelAssignment_12; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_12_0() { return cLabelEStringParserRuleCall_12_0; }
		
		//( "," label+=EString)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//label+=EString
		public Assignment getLabelAssignment_13_1() { return cLabelAssignment_13_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_13_1_0() { return cLabelEStringParserRuleCall_13_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexEIntParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNew_name_columnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNew_name_columnEStringParserRuleCall_3_0 = (RuleCall)cNew_name_columnAssignment_3.eContents().get(0);
		
		//Column returns Column:
		//    'column'
		//    index=EInt
		//    'as'
		//    new_name_column=EString  ;
		@Override public ParserRule getRule() { return rule; }
		
		//'column'
		//index=EInt
		//'as'
		//new_name_column=EString
		public Group getGroup() { return cGroup; }
		
		//'column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//index=EInt
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//EInt
		public RuleCall getIndexEIntParserRuleCall_1_0() { return cIndexEIntParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//new_name_column=EString
		public Assignment getNew_name_columnAssignment_3() { return cNew_name_columnAssignment_3; }
		
		//EString
		public RuleCall getNew_name_columnEStringParserRuleCall_3_0() { return cNew_name_columnEStringParserRuleCall_3_0; }
	}
	public class RowFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.RowFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumn_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumn_nameEStringParserRuleCall_0_0 = (RuleCall)cColumn_nameAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cString_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cString_valueEStringParserRuleCall_2_0 = (RuleCall)cString_valueAssignment_2.eContents().get(0);
		private final Assignment cInt_valueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInt_valueEIntParserRuleCall_3_0 = (RuleCall)cInt_valueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RowFilter returns RowFilter:
		//    column_name=EString
		//    operator=Operator
		//    (string_value=EString)?
		//    (int_value=EInt)? ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//column_name=EString
		//operator=Operator
		//(string_value=EString)?
		//(int_value=EInt)? ';'
		public Group getGroup() { return cGroup; }
		
		//column_name=EString
		public Assignment getColumn_nameAssignment_0() { return cColumn_nameAssignment_0; }
		
		//EString
		public RuleCall getColumn_nameEStringParserRuleCall_0_0() { return cColumn_nameEStringParserRuleCall_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }
		
		//(string_value=EString)?
		public Assignment getString_valueAssignment_2() { return cString_valueAssignment_2; }
		
		//EString
		public RuleCall getString_valueEStringParserRuleCall_2_0() { return cString_valueEStringParserRuleCall_2_0; }
		
		//(int_value=EInt)?
		public Assignment getInt_valueAssignment_3() { return cInt_valueAssignment_3; }
		
		//EInt
		public RuleCall getInt_valueEIntParserRuleCall_3_0() { return cInt_valueEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "chartIt.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreater_thanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreater_thanGreaterThanSignKeyword_0_0 = (Keyword)cGreater_thanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmaller_thanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmaller_thanLessThanSignKeyword_1_0 = (Keyword)cSmaller_thanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Operator returns Operator:
		//                greater_than = '>' | smaller_than = '<' | equal = '==';
		public EnumRule getRule() { return rule; }
		
		//greater_than = '>' | smaller_than = '<' | equal = '=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//greater_than = '>'
		public EnumLiteralDeclaration getGreater_thanEnumLiteralDeclaration_0() { return cGreater_thanEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGreater_thanGreaterThanSignKeyword_0_0() { return cGreater_thanGreaterThanSignKeyword_0_0; }
		
		//smaller_than = '<'
		public EnumLiteralDeclaration getSmaller_thanEnumLiteralDeclaration_1() { return cSmaller_thanEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getSmaller_thanLessThanSignKeyword_1_0() { return cSmaller_thanLessThanSignKeyword_1_0; }
		
		//equal = '=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_2_0() { return cEqualEqualsSignEqualsSignKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final CsvLoaderElements pCsvLoader;
	private final DataFilteringElements pDataFiltering;
	private final GraphDrawingElements pGraphDrawing;
	private final ColumnElements pColumn;
	private final RowFilterElements pRowFilter;
	private final OperatorElements eOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pCsvLoader = new CsvLoaderElements();
		this.pDataFiltering = new DataFilteringElements();
		this.pGraphDrawing = new GraphDrawingElements();
		this.pColumn = new ColumnElements();
		this.pRowFilter = new RowFilterElements();
		this.eOperator = new OperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("chartIt.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    'Program'
	//    name=EString
	//    '{'
	//        'id=' id=EString ';'
	//        functions+=Function  ( functions+=Function )*
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function returns Function:
	//    CsvLoader | DataFiltering | GraphDrawing;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//CsvLoader returns CsvLoader:
	//        "uses :"  path=EString ";"  ;
	public CsvLoaderElements getCsvLoaderAccess() {
		return pCsvLoader;
	}
	
	public ParserRule getCsvLoaderRule() {
		return getCsvLoaderAccess().getRule();
	}
	
	//DataFiltering returns DataFiltering:
	//        'filter :'
	//        column_filter+=Column (',' column_filter+=Column)*  ';'
	//        ('condition :')?
	//        (rowfilter_condition=RowFilter)? ;
	public DataFilteringElements getDataFilteringAccess() {
		return pDataFiltering;
	}
	
	public ParserRule getDataFilteringRule() {
		return getDataFilteringAccess().getRule();
	}
	
	//GraphDrawing returns GraphDrawing:
	//    'Draw a plot :'
	//        'graph_type=' graph_type=EString ';'
	//        'abs_column=' abs_column=EString ';'
	//        'ord_column='  ord_column+=EString ( "," ord_column+=EString)* ';'
	//        'labels='  label+=EString ( "," label+=EString)* ';' ;
	public GraphDrawingElements getGraphDrawingAccess() {
		return pGraphDrawing;
	}
	
	public ParserRule getGraphDrawingRule() {
		return getGraphDrawingAccess().getRule();
	}
	
	//Column returns Column:
	//    'column'
	//    index=EInt
	//    'as'
	//    new_name_column=EString  ;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//RowFilter returns RowFilter:
	//    column_name=EString
	//    operator=Operator
	//    (string_value=EString)?
	//    (int_value=EInt)? ';' ;
	public RowFilterElements getRowFilterAccess() {
		return pRowFilter;
	}
	
	public ParserRule getRowFilterRule() {
		return getRowFilterAccess().getRule();
	}
	
	//enum Operator returns Operator:
	//                greater_than = '>' | smaller_than = '<' | equal = '==';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
