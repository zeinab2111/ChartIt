// automatically generated by Xtext
grammar chartIt.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/chartIt" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	'Program'
	name=EString
	'{'
		'id=' id=EString ';'
		functions+=Function  ( functions+=Function )*
		
	'}';

Function returns Function:
	CsvLoader | DataFiltering | GraphDrawing;


EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;



CsvLoader returns CsvLoader:
	
		"uses :"  path=EString ";"
	 ;

DataFiltering returns DataFiltering:
		'filter :'
		(column_filter+=Column (',' column_filter+=Column)*  )? ';'
		'condition :'
		(rowfilter_condition=RowFilter)?
	 ;
	 
	 
GraphDrawing returns GraphDrawing:
	'Draw a plot :'
	
		('graph_type=' graph_type=EString)? ';'
		'abs_column=' abs_column=EString ';'
		'ord_column='  ord_column+=EString ( "," ord_column+=EString)* ';' 
		'labels='  labels+=EString ( "," labels+=EString)* ';'
	
	 ;
	 
	 
Column returns Column:
	
	'column'
	index+=EInt ( "," index+=EInt)*  
	'as'
	new_name_column+=EString ( "," new_name_column+=EString)*  
	;	


RowFilter returns RowFilter:
	
	column_name=EString
	operator=Operator
	(string_value=EString)? 
	(int_value=EInt)? ';'
	;
	
enum Operator returns Operator:
				greater_than = '>' | smaller_than = '<' | equal = '==';
	



	
// Program returns Program:
//	'Program'
//	name=EString
//	'{'
//		'id=' id=EString ';'
//		'Input'  data+=Data ';' ( "Input"  data+=Data ';')* 
//		functions+=Function ';' ( functions+=Function ';')*
//		
//	'}';
//
//Function returns Function:
//	CsvLoader | DataFiltering | GraphDrawing;
//
//Data returns Data:
//	Data_Impl | Input | Output;
//
//EString returns ecore::EString:
//	STRING | ID;
//	
//EInt returns ecore::EInt:
//	'-'? INT;
//
//Data_Impl returns Data:
//	{Data}
//	'Data'
//	name=EString
//	'{'
//		('type' data_type=EString)?
//	'}';
//
//CsvLoader returns CsvLoader:
//	'def CsvLoader'
//	
//	'{'
//		'input='  input+=[Data|EString] ( "," input+=[Data|EString])* ';' 
//		 output+=Data ';' (output+=Data ';')* 
//	'}' ;
//
//DataFiltering returns DataFiltering:
//		'def DataFiltering'
//	
//	'{'
//		'input=' input+=[Data|EString] ( "," input+=[Data|EString])* ';' 
//		'columns_index=' columns_index+=EInt ( "," columns_index+=EInt)* ';' 
//		'columns_name=' columns_name+=EString ( "," columns_name+=EString)* ';' 
//		 output+=Data ';' (output+=Data ';')* 
//	'}' ;
//
//GraphDrawing returns GraphDrawing:
//	'def GraphDrawing'
//	
//	'{'
//		'input=' input+=[Data|EString] ( "," input+=[Data|EString])* ';' 
//		('graph_type=' graph_type=EString)? ';'
//		'abs_column=' abs_column=EString ';'
//		'ord_column='  ord_column+=EString ( "," ord_column+=EString)* ';' 
//		'labels='  labels+=EString ( "," labels+=EString)* ';'
//		 output+=Data ';' (output+=Data ';')* 
//	'}' ;
//
//
//Input returns Input:
//	{Input}
//	name=EString
//	':'
//		(data_type=EString)? ('= ' data_path=EString )?
//	;
//
//Output returns Output:
//	{Output}
//	'Output'
//	name=EString
//	':'
//		(data_type=EString)? ('=' '"' data_path=EString '"')?
//	;
		
	
	