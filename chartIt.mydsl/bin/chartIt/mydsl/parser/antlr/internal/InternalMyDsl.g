/*
 * generated by Xtext 2.27.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package chartIt.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package chartIt.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import chartIt.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='id='
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getIdKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getIdEStringParserRuleCall_4_0());
				}
				lv_id_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"id",
						lv_id_4_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgramAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_6_0());
				}
				lv_functions_6_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"functions",
						lv_functions_6_0,
						"chartIt.mydsl.MyDsl.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_7_0());
				}
				lv_functions_7_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"functions",
						lv_functions_7_0,
						"chartIt.mydsl.MyDsl.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getCsvLoaderParserRuleCall_0());
		}
		this_CsvLoader_0=ruleCsvLoader
		{
			$current = $this_CsvLoader_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDataFilteringParserRuleCall_1());
		}
		this_DataFiltering_1=ruleDataFiltering
		{
			$current = $this_DataFiltering_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getGraphDrawingParserRuleCall_2());
		}
		this_GraphDrawing_2=ruleGraphDrawing
		{
			$current = $this_GraphDrawing_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCsvLoader
entryRuleCsvLoader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvLoaderRule()); }
	iv_ruleCsvLoader=ruleCsvLoader
	{ $current=$iv_ruleCsvLoader.current; }
	EOF;

// Rule CsvLoader
ruleCsvLoader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uses :'
		{
			newLeafNode(otherlv_0, grammarAccess.getCsvLoaderAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCsvLoaderAccess().getPathEStringParserRuleCall_1_0());
				}
				lv_path_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCsvLoaderRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getCsvLoaderAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleDataFiltering
entryRuleDataFiltering returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataFilteringRule()); }
	iv_ruleDataFiltering=ruleDataFiltering
	{ $current=$iv_ruleDataFiltering.current; }
	EOF;

// Rule DataFiltering
ruleDataFiltering returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='filter :'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataFilteringAccess().getFilterKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFilteringAccess().getColumn_filterColumnParserRuleCall_1_0_0());
					}
					lv_column_filter_1_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
						}
						add(
							$current,
							"column_filter",
							lv_column_filter_1_0,
							"chartIt.mydsl.MyDsl.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getDataFilteringAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDataFilteringAccess().getColumn_filterColumnParserRuleCall_1_1_1_0());
						}
						lv_column_filter_3_0=ruleColumn
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
							}
							add(
								$current,
								"column_filter",
								lv_column_filter_3_0,
								"chartIt.mydsl.MyDsl.Column");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDataFilteringAccess().getSemicolonKeyword_2());
		}
		otherlv_5='condition :'
		{
			newLeafNode(otherlv_5, grammarAccess.getDataFilteringAccess().getConditionKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataFilteringAccess().getRowfilter_conditionRowFilterParserRuleCall_4_0());
				}
				lv_rowfilter_condition_6_0=ruleRowFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
					}
					set(
						$current,
						"rowfilter_condition",
						lv_rowfilter_condition_6_0,
						"chartIt.mydsl.MyDsl.RowFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleGraphDrawing
entryRuleGraphDrawing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphDrawingRule()); }
	iv_ruleGraphDrawing=ruleGraphDrawing
	{ $current=$iv_ruleGraphDrawing.current; }
	EOF;

// Rule GraphDrawing
ruleGraphDrawing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Draw a plot :'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphDrawingAccess().getDrawAPlotKeyword_0());
		}
		(
			otherlv_1='graph_type='
			{
				newLeafNode(otherlv_1, grammarAccess.getGraphDrawingAccess().getGraph_typeKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphDrawingAccess().getGraph_typeEStringParserRuleCall_1_1_0());
					}
					lv_graph_type_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
						}
						set(
							$current,
							"graph_type",
							lv_graph_type_2_0,
							"chartIt.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_2());
		}
		otherlv_4='abs_column='
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphDrawingAccess().getAbs_columnKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphDrawingAccess().getAbs_columnEStringParserRuleCall_4_0());
				}
				lv_abs_column_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
					}
					set(
						$current,
						"abs_column",
						lv_abs_column_5_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_5());
		}
		otherlv_7='ord_column='
		{
			newLeafNode(otherlv_7, grammarAccess.getGraphDrawingAccess().getOrd_columnKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphDrawingAccess().getOrd_columnEStringParserRuleCall_7_0());
				}
				lv_ord_column_8_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
					}
					add(
						$current,
						"ord_column",
						lv_ord_column_8_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getGraphDrawingAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphDrawingAccess().getOrd_columnEStringParserRuleCall_8_1_0());
					}
					lv_ord_column_10_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
						}
						add(
							$current,
							"ord_column",
							lv_ord_column_10_0,
							"chartIt.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_9());
		}
		otherlv_12='labels='
		{
			newLeafNode(otherlv_12, grammarAccess.getGraphDrawingAccess().getLabelsKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphDrawingAccess().getLabelsEStringParserRuleCall_11_0());
				}
				lv_labels_13_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
					}
					add(
						$current,
						"labels",
						lv_labels_13_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getGraphDrawingAccess().getCommaKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphDrawingAccess().getLabelsEStringParserRuleCall_12_1_0());
					}
					lv_labels_15_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
						}
						add(
							$current,
							"labels",
							lv_labels_15_0,
							"chartIt.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16=';'
		{
			newLeafNode(otherlv_16, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_13());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='column'
		{
			newLeafNode(otherlv_0, grammarAccess.getColumnAccess().getColumnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getIndexEIntParserRuleCall_1_0());
				}
				lv_index_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					add(
						$current,
						"index",
						lv_index_1_0,
						"chartIt.mydsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnAccess().getIndexEIntParserRuleCall_2_1_0());
					}
					lv_index_3_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnRule());
						}
						add(
							$current,
							"index",
							lv_index_3_0,
							"chartIt.mydsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getColumnAccess().getAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getNew_name_columnEStringParserRuleCall_4_0());
				}
				lv_new_name_column_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					add(
						$current,
						"new_name_column",
						lv_new_name_column_5_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getColumnAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnAccess().getNew_name_columnEStringParserRuleCall_5_1_0());
					}
					lv_new_name_column_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnRule());
						}
						add(
							$current,
							"new_name_column",
							lv_new_name_column_7_0,
							"chartIt.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRowFilter
entryRuleRowFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowFilterRule()); }
	iv_ruleRowFilter=ruleRowFilter
	{ $current=$iv_ruleRowFilter.current; }
	EOF;

// Rule RowFilter
ruleRowFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getColumn_nameEStringParserRuleCall_0_0());
				}
				lv_column_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"column_name",
						lv_column_name_0_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getOperatorOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"chartIt.mydsl.MyDsl.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getString_valueEStringParserRuleCall_2_0());
				}
				lv_string_value_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"string_value",
						lv_string_value_2_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getInt_valueEIntParserRuleCall_3_0());
				}
				lv_int_value_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"int_value",
						lv_int_value_3_0,
						"chartIt.mydsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRowFilterAccess().getSemicolonKeyword_4());
		}
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getOperatorAccess().getGreater_thanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getGreater_thanEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getOperatorAccess().getSmaller_thanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getSmaller_thanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
