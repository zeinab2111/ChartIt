/*
 * generated by Xtext 2.27.0
 */
package chartIt.mydsl.serializer;

import chartIt.ChartItPackage;
import chartIt.Column;
import chartIt.CsvLoader;
import chartIt.DataFiltering;
import chartIt.GraphDrawing;
import chartIt.Program;
import chartIt.RowFilter;
import chartIt.mydsl.services.MyDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ChartItPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ChartItPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case ChartItPackage.CSV_LOADER:
				sequence_CsvLoader(context, (CsvLoader) semanticObject); 
				return; 
			case ChartItPackage.DATA_FILTERING:
				sequence_DataFiltering(context, (DataFiltering) semanticObject); 
				return; 
			case ChartItPackage.GRAPH_DRAWING:
				sequence_GraphDrawing(context, (GraphDrawing) semanticObject); 
				return; 
			case ChartItPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case ChartItPackage.ROW_FILTER:
				sequence_RowFilter(context, (RowFilter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (index=EInt new_name_column=EString)
	 * </pre>
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChartItPackage.Literals.COLUMN__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItPackage.Literals.COLUMN__INDEX));
			if (transientValues.isValueTransient(semanticObject, ChartItPackage.Literals.COLUMN__NEW_NAME_COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItPackage.Literals.COLUMN__NEW_NAME_COLUMN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnAccess().getIndexEIntParserRuleCall_1_0(), semanticObject.getIndex());
		feeder.accept(grammarAccess.getColumnAccess().getNew_name_columnEStringParserRuleCall_3_0(), semanticObject.getNew_name_column());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns CsvLoader
	 *     CsvLoader returns CsvLoader
	 *
	 * Constraint:
	 *     path=EString
	 * </pre>
	 */
	protected void sequence_CsvLoader(ISerializationContext context, CsvLoader semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChartItPackage.Literals.CSV_LOADER__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItPackage.Literals.CSV_LOADER__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCsvLoaderAccess().getPathEStringParserRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns DataFiltering
	 *     DataFiltering returns DataFiltering
	 *
	 * Constraint:
	 *     (column_filter+=Column column_filter+=Column* rowfilter_condition=RowFilter?)
	 * </pre>
	 */
	protected void sequence_DataFiltering(ISerializationContext context, DataFiltering semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns GraphDrawing
	 *     GraphDrawing returns GraphDrawing
	 *
	 * Constraint:
	 *     (
	 *         graph_type=EString | 
	 *         abs_column=EString | 
	 *         (((ord_column+=EString ord_column+=EString*) | (label+=EString label+=EString*) | (fill+=EBoolean fill+=EBoolean*)) title+=EString*)
	 *     )+
	 * </pre>
	 */
	protected void sequence_GraphDrawing(ISerializationContext context, GraphDrawing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=EString id=EString functions+=Function functions+=Function*)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RowFilter returns RowFilter
	 *
	 * Constraint:
	 *     (column_name=EString operator=Operator string_value=EString? int_value=EInt?)
	 * </pre>
	 */
	protected void sequence_RowFilter(ISerializationContext context, RowFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
