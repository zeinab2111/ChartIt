/*
 * generated by Xtext 2.27.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package chartIt.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package chartIt.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import chartIt.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='id'
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getIdKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getIdEStringParserRuleCall_5_0());
				}
				lv_id_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"id",
						lv_id_5_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getProgramAccess().getSemicolonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_7_0());
				}
				lv_functions_7_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"functions",
						lv_functions_7_0,
						"chartIt.mydsl.MyDsl.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_8_0());
				}
				lv_functions_8_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"functions",
						lv_functions_8_0,
						"chartIt.mydsl.MyDsl.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getCsvLoaderParserRuleCall_0());
		}
		this_CsvLoader_0=ruleCsvLoader
		{
			$current = $this_CsvLoader_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDataFilteringParserRuleCall_1());
		}
		this_DataFiltering_1=ruleDataFiltering
		{
			$current = $this_DataFiltering_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getGraphDrawingParserRuleCall_2());
		}
		this_GraphDrawing_2=ruleGraphDrawing
		{
			$current = $this_GraphDrawing_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleCsvLoader
entryRuleCsvLoader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvLoaderRule()); }
	iv_ruleCsvLoader=ruleCsvLoader
	{ $current=$iv_ruleCsvLoader.current; }
	EOF;

// Rule CsvLoader
ruleCsvLoader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uses :'
		{
			newLeafNode(otherlv_0, grammarAccess.getCsvLoaderAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCsvLoaderAccess().getPathEStringParserRuleCall_1_0());
				}
				lv_path_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCsvLoaderRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getCsvLoaderAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleDataFiltering
entryRuleDataFiltering returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataFilteringRule()); }
	iv_ruleDataFiltering=ruleDataFiltering
	{ $current=$iv_ruleDataFiltering.current; }
	EOF;

// Rule DataFiltering
ruleDataFiltering returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='filter :'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataFilteringAccess().getFilterKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataFilteringAccess().getColumn_filterColumnParserRuleCall_1_0());
				}
				lv_column_filter_1_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
					}
					add(
						$current,
						"column_filter",
						lv_column_filter_1_0,
						"chartIt.mydsl.MyDsl.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDataFilteringAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFilteringAccess().getColumn_filterColumnParserRuleCall_2_1_0());
					}
					lv_column_filter_3_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
						}
						add(
							$current,
							"column_filter",
							lv_column_filter_3_0,
							"chartIt.mydsl.MyDsl.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDataFilteringAccess().getSemicolonKeyword_3());
		}
		(
			otherlv_5='condition :'
			{
				newLeafNode(otherlv_5, grammarAccess.getDataFilteringAccess().getConditionKeyword_4());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDataFilteringAccess().getRowfilter_conditionRowFilterParserRuleCall_5_0());
				}
				lv_rowfilter_condition_6_0=ruleRowFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
					}
					set(
						$current,
						"rowfilter_condition",
						lv_rowfilter_condition_6_0,
						"chartIt.mydsl.MyDsl.RowFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleGraphDrawing
entryRuleGraphDrawing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphDrawingRule()); }
	iv_ruleGraphDrawing=ruleGraphDrawing
	{ $current=$iv_ruleGraphDrawing.current; }
	EOF;

// Rule GraphDrawing
ruleGraphDrawing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getGraphDrawingAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='draw a plot :'
							{
								newLeafNode(otherlv_1, grammarAccess.getGraphDrawingAccess().getDrawAPlotKeyword_0_0());
							}
							otherlv_2='graph_type'
							{
								newLeafNode(otherlv_2, grammarAccess.getGraphDrawingAccess().getGraph_typeKeyword_0_1());
							}
							otherlv_3='='
							{
								newLeafNode(otherlv_3, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_0_2());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getGraphDrawingAccess().getGraph_typeEStringParserRuleCall_0_3_0());
									}
									lv_graph_type_4_0=ruleEString
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
										}
										set(
											$current,
											"graph_type",
											lv_graph_type_4_0,
											"chartIt.mydsl.MyDsl.EString");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_5=';'
							{
								newLeafNode(otherlv_5, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_0_4());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 1);
				}
							({true}?=>(otherlv_6='abs_column'
							{
								newLeafNode(otherlv_6, grammarAccess.getGraphDrawingAccess().getAbs_columnKeyword_1_0());
							}
							otherlv_7='='
							{
								newLeafNode(otherlv_7, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_1_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getGraphDrawingAccess().getAbs_columnEStringParserRuleCall_1_2_0());
									}
									lv_abs_column_8_0=ruleEString
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
										}
										set(
											$current,
											"abs_column",
											lv_abs_column_8_0,
											"chartIt.mydsl.MyDsl.EString");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_9=';'
							{
								newLeafNode(otherlv_9, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_1_3());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								(
									{ 
									  getUnorderedGroupHelper().enter(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0());
									}
									(
										(
								(
									{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 0)}?=>(
										{
											getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 0);
										}
													({true}?=>(otherlv_11='ord_column'
													{
														newLeafNode(otherlv_11, grammarAccess.getGraphDrawingAccess().getOrd_columnKeyword_2_0_0_0());
													}
													otherlv_12='='
													{
														newLeafNode(otherlv_12, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_2_0_0_1());
													}
													(
														(
															{
																newCompositeNode(grammarAccess.getGraphDrawingAccess().getOrd_columnEStringParserRuleCall_2_0_0_2_0());
															}
															lv_ord_column_13_0=ruleEString
															{
																if ($current==null) {
																	$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																}
																add(
																	$current,
																	"ord_column",
																	lv_ord_column_13_0,
																	"chartIt.mydsl.MyDsl.EString");
																afterParserOrEnumRuleCall();
															}
														)
													)
													(
														otherlv_14=','
														{
															newLeafNode(otherlv_14, grammarAccess.getGraphDrawingAccess().getCommaKeyword_2_0_0_3_0());
														}
														(
															(
																{
																	newCompositeNode(grammarAccess.getGraphDrawingAccess().getOrd_columnEStringParserRuleCall_2_0_0_3_1_0());
																}
																lv_ord_column_15_0=ruleEString
																{
																	if ($current==null) {
																		$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																	}
																	add(
																		$current,
																		"ord_column",
																		lv_ord_column_15_0,
																		"chartIt.mydsl.MyDsl.EString");
																	afterParserOrEnumRuleCall();
																}
															)
														)
													)*
													otherlv_16=';'
													{
														newLeafNode(otherlv_16, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_2_0_0_4());
													}
													))
										{ 
											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0());
										}
									)
								)|
								(
									{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 1)}?=>(
										{
											getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 1);
										}
													({true}?=>(otherlv_17='labels'
													{
														newLeafNode(otherlv_17, grammarAccess.getGraphDrawingAccess().getLabelsKeyword_2_0_1_0());
													}
													otherlv_18='='
													{
														newLeafNode(otherlv_18, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_2_0_1_1());
													}
													(
														(
															{
																newCompositeNode(grammarAccess.getGraphDrawingAccess().getLabelEStringParserRuleCall_2_0_1_2_0());
															}
															lv_label_19_0=ruleEString
															{
																if ($current==null) {
																	$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																}
																add(
																	$current,
																	"label",
																	lv_label_19_0,
																	"chartIt.mydsl.MyDsl.EString");
																afterParserOrEnumRuleCall();
															}
														)
													)
													(
														otherlv_20=','
														{
															newLeafNode(otherlv_20, grammarAccess.getGraphDrawingAccess().getCommaKeyword_2_0_1_3_0());
														}
														(
															(
																{
																	newCompositeNode(grammarAccess.getGraphDrawingAccess().getLabelEStringParserRuleCall_2_0_1_3_1_0());
																}
																lv_label_21_0=ruleEString
																{
																	if ($current==null) {
																		$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																	}
																	add(
																		$current,
																		"label",
																		lv_label_21_0,
																		"chartIt.mydsl.MyDsl.EString");
																	afterParserOrEnumRuleCall();
																}
															)
														)
													)*
													otherlv_22=';'
													{
														newLeafNode(otherlv_22, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_2_0_1_4());
													}
													))
										{ 
											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0());
										}
									)
								)|
								(
									{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 2)}?=>(
										{
											getUnorderedGroupHelper().select(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0(), 2);
										}
													({true}?=>(otherlv_23='fill'
													{
														newLeafNode(otherlv_23, grammarAccess.getGraphDrawingAccess().getFillKeyword_2_0_2_0());
													}
													otherlv_24='='
													{
														newLeafNode(otherlv_24, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_2_0_2_1());
													}
													(
														(
															{
																newCompositeNode(grammarAccess.getGraphDrawingAccess().getFillEBooleanParserRuleCall_2_0_2_2_0());
															}
															lv_fill_25_0=ruleEBoolean
															{
																if ($current==null) {
																	$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																}
																add(
																	$current,
																	"fill",
																	lv_fill_25_0,
																	"chartIt.mydsl.MyDsl.EBoolean");
																afterParserOrEnumRuleCall();
															}
														)
													)
													(
														otherlv_26=','
														{
															newLeafNode(otherlv_26, grammarAccess.getGraphDrawingAccess().getCommaKeyword_2_0_2_3_0());
														}
														(
															(
																{
																	newCompositeNode(grammarAccess.getGraphDrawingAccess().getFillEBooleanParserRuleCall_2_0_2_3_1_0());
																}
																lv_fill_27_0=ruleEBoolean
																{
																	if ($current==null) {
																		$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
																	}
																	add(
																		$current,
																		"fill",
																		lv_fill_27_0,
																		"chartIt.mydsl.MyDsl.EBoolean");
																	afterParserOrEnumRuleCall();
																}
															)
														)
													)*
													otherlv_28=';'
													{
														newLeafNode(otherlv_28, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_2_0_2_4());
													}
													))
										{ 
											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0());
										}
									)
								)
										)+
										{getUnorderedGroupHelper().canLeave(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0())}?
									)
								)
									{ 
									  getUnorderedGroupHelper().leave(grammarAccess.getGraphDrawingAccess().getUnorderedGroup_2_0());
									}
							)
							(
								otherlv_29='title'
								{
									newLeafNode(otherlv_29, grammarAccess.getGraphDrawingAccess().getTitleKeyword_2_1_0());
								}
								otherlv_30='='
								{
									newLeafNode(otherlv_30, grammarAccess.getGraphDrawingAccess().getEqualsSignKeyword_2_1_1());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getGraphDrawingAccess().getTitleEStringParserRuleCall_2_1_2_0());
										}
										lv_title_31_0=ruleEString
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getGraphDrawingRule());
											}
											add(
												$current,
												"title",
												lv_title_31_0,
												"chartIt.mydsl.MyDsl.EString");
											afterParserOrEnumRuleCall();
										}
									)
								)*
								otherlv_32=';'
								{
									newLeafNode(otherlv_32, grammarAccess.getGraphDrawingAccess().getSemicolonKeyword_2_1_3());
								}
							)?
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphDrawingAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getGraphDrawingAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getGraphDrawingAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='column'
		{
			newLeafNode(otherlv_0, grammarAccess.getColumnAccess().getColumnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getIndexEIntParserRuleCall_1_0());
				}
				lv_index_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"index",
						lv_index_1_0,
						"chartIt.mydsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getAsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getNew_name_columnEStringParserRuleCall_3_0());
				}
				lv_new_name_column_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"new_name_column",
						lv_new_name_column_3_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRowFilter
entryRuleRowFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowFilterRule()); }
	iv_ruleRowFilter=ruleRowFilter
	{ $current=$iv_ruleRowFilter.current; }
	EOF;

// Rule RowFilter
ruleRowFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getColumn_nameEStringParserRuleCall_0_0());
				}
				lv_column_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"column_name",
						lv_column_name_0_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getOperatorOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"chartIt.mydsl.MyDsl.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getString_valueEStringParserRuleCall_2_0());
				}
				lv_string_value_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"string_value",
						lv_string_value_2_0,
						"chartIt.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRowFilterAccess().getInt_valueEIntParserRuleCall_3_0());
				}
				lv_int_value_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowFilterRule());
					}
					set(
						$current,
						"int_value",
						lv_int_value_3_0,
						"chartIt.mydsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRowFilterAccess().getSemicolonKeyword_4());
		}
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getOperatorAccess().getGreater_thanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getGreater_thanEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getOperatorAccess().getSmaller_thanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getSmaller_thanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getOperatorAccess().getGreater_than_or_equalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getGreater_than_or_equalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getOperatorAccess().getSmaller_than_or_equalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getSmaller_than_or_equalEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getOperatorAccess().getNot_equalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getNot_equalEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
