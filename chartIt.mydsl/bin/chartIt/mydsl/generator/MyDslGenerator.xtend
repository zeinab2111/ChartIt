/*
 * generated by Xtext 2.27.0
 */
package chartIt.mydsl.generator

import chartIt.CsvLoader
import chartIt.DataFiltering
import chartIt.GraphDrawing
import chartIt.Program
import java.io.BufferedReader
import java.io.FileReader
import java.util.List
import java.util.stream.Collectors
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import chartIt.RowFilter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var Program prog = resource.contents.get(0) as Program;
		var id_chart = prog.id
		var String res = "<!DOCTYPE html>"+"\n"+"<head>"+"\n"+"</head>"+"\n"+"<body>"+"\n"+"<div>"+"\n"+"  <canvas id=" + "\"" + id_chart + "\"" +"></canvas>"+"\n"+"</div>"+"\n"
		//var i = 0
		var exist_condition = false
		var path =''
		for(f : prog.functions){
			if (f instanceof CsvLoader){
				path = f.path
				csvprint(path) 
				res+= "<script src="+"\""+"https://cdn.jsdelivr.net/npm/chart.js"+"\""+"></script>"+"\n"
				res+= "<!-- <script src="+"\""+"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js"+"\""+"></script> -->"+"\n"
				res+= "<script>"+"\n"
			}
			
			else if(f instanceof DataFiltering){
				val columns_index = newArrayList()
				val columns_name = newArrayList
				for (col : f.column_filter){
					for (index : col.index){
					columns_index+=index
					}
					for (name : col.new_name_column){
						columns_name+=name
					}	
				}
				res+=filterprint(columns_index,columns_name, path) + "\n"
				if(f.rowfilter_condition != null) {
					exist_condition = true
					val condition =  f.rowfilter_condition
					val column_condition = condition.column_name
					val op = condition.operator
					val opr = op.toString()
					var operator = ''
					if (opr == "equal"){
						operator = "==="
					}
					else if (opr == "greater_than"){
						operator = ">"
					}
					else if (opr == "smaller_than"){
						operator = "<"
					}
					var string_value=''
					var int_value = 0
					if (condition.string_value != null){
						string_value = condition.string_value
						res+= "const filteredData = data.filter(row => row."+column_condition+ operator + "\""+string_value+"\""+");"+"\n"
					}
					else {
						int_value = condition.int_value
						res+= "const filteredData = data.filter(row => row."+column_condition+operator+int_value+");"+"\n"
					}
					
					
					
				}
				
			}
			else if(f instanceof GraphDrawing){
				val id = id_chart
				val type = f.graph_type
				val abs_column = f.abs_column
				val ord_column = f.ord_column
				val labels = f.labels
				val data = #["data", "filteredData"]
				if (exist_condition == true){
					res+= graphprint(id, type, abs_column, ord_column, labels, data.get(1))+ "\n"
				}
				else{
					res+= graphprint(id, type, abs_column, ord_column, labels, data.get(0))+ "\n"
				}
					
			}
		}
		res+="</script>" + "\n" + "</body>" 
		fsa.generateFile(prog.name+'.html',res);
	}
	def List<String> csvprint(String path){
		
		val csvFile = path
		val bufferedReader = new BufferedReader(new FileReader(csvFile))
		val lines = bufferedReader.lines().collect(Collectors.toList())
		
		return lines 
	}
	def String filterprint(List<Integer> columns_index, List<String> columns_name, String path){
		val nb_columns = columns_index.size()
		val lines  =  csvprint(path)
		val sb = new StringBuilder()
		sb.append("const data = [" + "\n")
		for (j : 2 ..< lines.size()) {
          val line = lines.get(j)
		  val cells = line.split(";")
		  sb.append("{")
		  for (i : 0 ..< nb_columns){
		  	sb.append(columns_name.get(i))
		  	sb.append(":")
		  	val cell = cells.get(columns_index.get(i));
		  	if (cell instanceof String) {
       		 sb.append("\"" + cell + "\"");
    	  	}
    	  	else {
    	  		sb.append(cell)
    	  	}
		  	sb.append(",")
		  } 
		  sb.setLength(sb.length() - 1)
		  sb.append("},"+"\n")
		}
		sb.setLength(sb.length() - 1)
		sb.append("\n"+"];")
		val table  = sb.toString()
		
		return table
	}
	def String graphprint(String id, String type, String abs_column, List<String> ord_column, List<String> labels, String data){
		val sb = new StringBuilder()
		sb.append("new Chart(" + "\n")
		sb.append("document.getElementById(" + "\'" + id  + "\'" + ")," + "\n")
		sb.append("{"+ "\n")
		sb.append("type: " + "\'" + type + "\'" + "," + "\n")
		sb.append("data: {" + "\n")
		sb.append("labels: "+data+".map(row => row." + abs_column +")," + "\n")
		sb.append("datasets: [" + "\n")
		val nb_ord_column = labels.size()
		for (i : 0 ..< nb_ord_column){
			sb.append("{" + "\n")
			sb.append("label: " + "\"" + labels.get(i) + "\"" + "," + "\n")
			sb.append("data: "+data+".map(row => row." + ord_column.get(i) + ")," + "\n")
			sb.append("}," + "\n")
		}
		sb.append("]" + "\n")
		sb.append("}" + "\n")
		sb.append("}" + "\n")
		sb.append(");" + "\n")
		val table = sb.toString()
		
		return table
	}
}


//class MyDslGenerator extends AbstractGenerator {
//
//	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		var Program prog = resource.contents.get(0) as Program;
//		var id_chart = prog.id
//		var String res = "<!DOCTYPE html>"+"\n"+"<head>"+"\n"+"</head>"+"\n"+"<body>"+"\n"+"<div>"+"\n"+"  <canvas id=" + "\"" + id_chart + "\"" +"></canvas>"+"\n"+"</div>"+"\n"
//		var i = 0
//		var path=""
//		for(f : prog.functions){
//			if (f instanceof CsvLoader){
//				val input = f.input.findFirst[name == "int_1"]
//				val input_path = input.data_path
//				path = input_path.toString()
//				csvprint(path) 
//				res+= "<script src="+"\""+"https://cdn.jsdelivr.net/npm/chart.js"+"\""+"></script>"+"\n"
//				res+= "<!-- <script src="+"\""+"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js"+"\""+"></script> -->"+"\n"
//				res+= "<script>"+"\n"
//			}
//			
//			else if(f instanceof DataFiltering){
//				val columns_index = newArrayList()
//				val columns_name = newArrayList
//				for (c: f.columns_index){
//					columns_index+=c
//				}
//				for (n: f.columns_name){
//					columns_name+=n
//				}
//				res+=filterprint(columns_index,columns_name, path) + "\n"
//			}
//			else if(f instanceof GraphDrawing){
//				val id = id_chart
//				val type = f.graph_type
//				val abs_column = f.abs_column
//				val ord_column = f.ord_column
//				val labels = f.labels
//				res+= graphprint(id, type, abs_column, ord_column, labels)+ "\n"
//			}
//		}
//		res+="</script>" + "\n" + "</body" 
//		fsa.generateFile(prog.name+'.html',res);
//	}
//	def List<String> csvprint(String path){
//		
//		val csvFile = path
//		val bufferedReader = new BufferedReader(new FileReader(csvFile))
//		val lines = bufferedReader.lines().collect(Collectors.toList())
//		
//		return lines 
//	}
//	def String filterprint(List<Integer> columns_index, List<String> columns_name, String path){
//		val nb_columns = columns_index.size()
//		val lines  =  csvprint(path)
//		val sb = new StringBuilder()
//		sb.append("const data = [" + "\n")
//		for (j : 2 ..< lines.size()) {
//          val line = lines.get(j)
//		  val cells = line.split(";")
//		  sb.append("{")
//		  for (i : 0 ..< nb_columns){
//		  	sb.append(columns_name.get(i))
//		  	sb.append(":")
//		  	val cell = cells.get(columns_index.get(i));
//		  	if (cell instanceof String) {
//       		 sb.append("\"" + cell + "\"");
//    	  	}
//    	  	else {
//    	  		sb.append(cell)
//    	  	}
//		  	sb.append(",")
//		  } 
//		  sb.setLength(sb.length() - 1)
//		  sb.append("},"+"\n")
//		}
//		sb.setLength(sb.length() - 1)
//		sb.append("\n"+"];")
//		val table  = sb.toString()
//		
//		return table
//	}
//	def String graphprint(String id, String type, String abs_column, List<String> ord_column, List<String> labels){
//		val sb = new StringBuilder()
//		sb.append("new Chart(" + "\n")
//		sb.append("document.getElementById(" + "\'" + id  + "\'" + ")," + "\n")
//		sb.append("{"+ "\n")
//		sb.append("type: " + "\'" + type + "\'" + "," + "\n")
//		sb.append("data: {" + "\n")
//		sb.append("labels: data.map(row => row." + abs_column +")," + "\n")
//		sb.append("datasets: [" + "\n")
//		val nb_ord_column = labels.size()
//		for (i : 0 ..< nb_ord_column){
//			sb.append("{" + "\n")
//			sb.append("label: " + "\"" + labels.get(i) + "\"" + "," + "\n")
//			sb.append("data: data.map(row => row." + ord_column.get(i) + ")," + "\n")
//			sb.append("}," + "\n")
//		}
//		sb.append("]" + "\n")
//		sb.append("}" + "\n")
//		sb.append("}" + "\n")
//		sb.append(");" + "\n")
//		val table = sb.toString()
//		
//		return table
//	}
//}






